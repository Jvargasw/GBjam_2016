<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_mimic</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
grav = 0.5;
spd = 3;
jspd = 5;
hspd = 0;
vspd = 0;
jumps = 0;
jumpsmax = 2;
attacking = false;
hspd_carry = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Physics ////////////////////////////////////////////////////////////////

var rkey = keyboard_check(vk_right);
var lkey = keyboard_check(vk_left);
var jkey = keyboard_check_pressed(vk_up);


// Check for the ground ///////////////////////
        if (place_meeting(x, y+1, obj_collision)) {
         vspd = 0;
            jumps = jumpsmax;
        } 
   
       
                 
else {
    // Gravity
    if (vspd &lt; 10) {
        vspd += grav;
    }
}


// Moving right
if (rkey) {
    hspd = spd;
}

// Moving left
if (lkey) {
    hspd = -spd;
}

// Check for not moving /////////////////
if ((!rkey &amp;&amp; !lkey) || (rkey &amp;&amp; lkey)) {
    hspd = 0;
}

// Down /////////////////////////////////////////////////////////////////

var hspd_final = hspd + hspd_carry;
hspd_carry = 0;


// Horizontal collisions /////////////////////////////////////
        if (place_meeting(x+hspd_final, y, obj_collision)) {
         while (!place_meeting(x+sign(hspd_final), y, obj_collision)) {
             x+= sign(hspd_final);
            }
         hspd_final = 0;
         hspd = 0;
        }     

                           
// Move horizontally
x += hspd_final;

// Vertical collisions ///////////////////////////////////////
        if (place_meeting(x, y+vspd, obj_collision)) {
         while (!place_meeting(x, y+sign(vspd), obj_collision)) {
              y+= sign(vspd);
            }
         vspd = 0;
        }     

                                      
// Move vertically
y += vspd;



// Control Sprites /////////////////////////////////////////////////////////
// Jump
if (yprevious != y){
    sprite_index = spr_mimic;
    image_speed = 0;
    image_index = y&gt;yprevious;
} 
else{

// Horizontal or no movement
    if (xprevious != x){
        sprite_index = spr_mimic_moveR;
        image_speed = 1;
    }
    else{
        sprite_index = spr_mimic;
    }
}


//Direction facing
    if (xprevious &lt; x){
    image_xscale = 1;
}
    else if (xprevious &gt; x){
    image_xscale = -1;
}

// Hitting blocks?

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
